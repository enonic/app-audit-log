plugins {
    id 'java'
    id 'maven-publish'
    id "com.enonic.xp.app" version "3.5.2"
    id "com.github.node-gradle.node" version "7.1.0"
}

apply from: "$rootDir/gradle/env.gradle"
apply from: "$rootDir/gradle/node.gradle"

app {
    name = "${appName}"
    displayName = "${appDisplayName}"
    vendorName = "${vendorName}"
    vendorUrl = "${vendorUrl}"
    systemVersion = "${xpVersion}"

    devSourcePaths += file("$rootDir/../lib-admin-ui/src/main/resources")
}

configurations {
    devResources {
        attributes {
            attribute(LibraryElements.LIBRARY_ELEMENTS_ATTRIBUTE, objects.named(LibraryElements, 'dev-resources'))
        }
    }
}

dependencies {
    include "com.enonic.xp:lib-portal:${xpVersion}"
    include "com.enonic.xp:lib-auditlog:${xpVersion}"
    include "com.enonic.xp:lib-node:${xpVersion}"
    include "com.enonic.xp:lib-auth:${xpVersion}"
    include "com.enonic.xp:lib-admin:${xpVersion}"
    include "com.enonic.xp:lib-io:${xpVersion}"
    include "com.enonic.xp:lib-project:${xpVersion}"
    include "com.enonic.lib:lib-thymeleaf:2.1.1"
    include 'com.enonic.lib:lib-license:3.1.0'
    include "com.enonic.lib:lib-admin-ui:${libAdminUiVersion}"
    devResources "com.enonic.lib:lib-admin-ui:${libAdminUiVersion}"
}

node {
    download = true
    version = '20.9.0'
}

task lint( type: NpmTask, dependsOn: npmInstall ) {
    args = [ 'run', 'lint' ]
    inputs.files fileTree( dir: 'modules', include: '**/src/main/**.*' )
    outputs.dir file('gradle')
    outputs.upToDateWhen { false }
}

task webpack( type: NpmTask, dependsOn: [npmInstall, lint] ) {
    doLast {
        println "Build mode: " + nodeEnvironment()
    }
    environment = [ 'NODE_ENV': nodeEnvironment() ]
    description = 'Build UI resources (ts, css, etc).'
    args = [ 'run', 'build' ]
    inputs.dir '.xp/dev'
    inputs.dir 'src/main'
    inputs.file 'webpack.config.js'
    outputs.dir "${buildDir}/resources/main"
}

task copyDevResources {
    doLast {
        copy {
            from configurations.devResources.files.collect { zipTree( it ) }
            include 'dev/**'
            into '.xp'
        }
    }
}

task flush( type: org.gradle.api.tasks.Delete, dependsOn: clean ) {
    description = 'Clean the project from built sources and dependencies'
    delete '.xp'
}

npmInstall.dependsOn copyDevResources

jar {
    exclude 'assets/**/*.ts'
    exclude 'assets/**/*.scss'
    if (isProd()) {
        exclude 'assets/**/*.map'
    }

    outputs.dir "${buildDir}/resources/main"

    dependsOn += webpack
}


repositories {
    mavenLocal()
    mavenCentral()
    xp.enonicRepo('dev')
}

if ( hasEnvironment() && isLibAdminUiIncluded() )
{
    addBuildDependency()
}

def addBuildDependency() {
    def libAdminBuildTask = gradle.includedBuild('lib-admin-ui').task(':build')
    copyDevResources.dependsOn += libAdminBuildTask
    build.dependsOn += libAdminBuildTask
    clean.dependsOn += gradle.includedBuild('lib-admin-ui').task(':clean')
    flush.dependsOn += gradle.includedBuild('lib-admin-ui').task(':flush')
}

def isLibAdminUiIncluded() {
    return new File( '../lib-admin-ui' ).exists()
}
