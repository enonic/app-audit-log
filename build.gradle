plugins {
    id 'java'
    id 'maven-publish'
    id "com.enonic.defaults" version "2.0.1"
    id "com.enonic.xp.app" version "2.0.0"
    id "com.github.node-gradle.node" version "2.2.4"
}

apply from: "$rootDir/gradle/env.gradle"
apply from: "$rootDir/gradle/lib-admin.gradle"
apply from: "$rootDir/gradle/node.gradle"

app {
    name = "${appName}"
    displayName = "${appDisplayName}"
    vendorName = "${vendorName}"
    vendorUrl = "${vendorUrl}"
    systemVersion = "${xpVersion}"

    devSourcePaths += file("$rootDir/../lib-admin-ui/src/main/resources")
}

dependencies {
    compile "com.enonic.xp:core-api:${xpVersion}"
    compile "com.enonic.xp:portal-api:${xpVersion}"
    include "com.enonic.xp:lib-content:${xpVersion}"
    include "com.enonic.xp:lib-portal:${xpVersion}"
    include "com.enonic.xp:lib-auditlog:${xpVersion}"
    include "com.enonic.xp:lib-node:${xpVersion}"
    include "com.enonic.xp:lib-auth:${xpVersion}"
    include "com.enonic.xp:lib-admin:${xpVersion}"
    include "com.enonic.xp:lib-io:${xpVersion}"

    include "com.enonic.lib:lib-thymeleaf:2.0.0"
    include "com.enonic.lib:lib-admin-ui:3.2.0"

    include 'com.enonic.lib:lib-license:3.0.0'
}

node {
    version = "14.14.0"
    download = true
}

task lint( type: NpmTask, dependsOn: npmInstall ) {
    args = [ 'run', 'lint' ]
    inputs.files fileTree( dir: 'modules', include: '**/src/main/**.*' )
    outputs.dir file('gradle')
    outputs.upToDateWhen { false }
}

task webpack( type: NpmTask, dependsOn: [npmInstall, lint] ) {
    doLast {
        println "Build mode: " + nodeEnvironment()
    }
    environment = [ 'NODE_ENV': nodeEnvironment() ]
    description = 'Build UI resources (ts, css, etc).'
    args = [ 'run', 'build' ]
    inputs.dir '.xp/dev'
    inputs.dir 'src/main'
    inputs.file 'webpack.config.js'
    outputs.dir "${buildDir}/resources/main"
}

processResources.dependsOn += unpackDevResources
npmInstall.mustRunAfter unpackDevResources

jar {
    outputs.dir "${buildDir}/resources/main"

    dependsOn += webpack
}

sourceSets {
    main {
        resources {
            exclude '**/*.ts'
            exclude '**/*.scss'
            if (isProd()) {
                exclude '**/*.map'
            }
        }
    }
}

repositories {
    mavenLocal()
    jcenter()
    xp.enonicRepo('dev')
}

if ( hasEnvironment() )
{
    addBuildDependency()
}

def addBuildDependency() {
    def unpackDevResources = tasks.findByPath( ':unpackDevResources' )
    def webpackTask = tasks.findByPath( ':webpack' )

    if ( webpackTask != null ) {
        webpackTask.dependsOn += unpackDevResources
    }

    if ( isLibAdminUiIncluded() )
    {
        unpackDevResources.dependsOn += libAdminBuildTask
        build.dependsOn += libAdminBuildTask
        clean.dependsOn += libAdminCleanTask
        flush.dependsOn += libAdminFlushTask
    }
}